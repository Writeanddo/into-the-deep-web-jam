[gd_scene load_steps=5 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float SCREEN_HEIGHT = 240.0;
uniform float SCREEN_WIDTH = 320.0;

void fragment() {
	int y_index = int(UV.y * SCREEN_HEIGHT);
	COLOR.a = mix(0.0, 0.05, float(y_index % 2));
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/SCREEN_HEIGHT = 240.0
shader_param/SCREEN_WIDTH = 320.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float vignette_intensity = 0.4;
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment() {
	COLOR = texture(SCREEN_TEXTURE, SCREEN_UV);
	COLOR.rgb *= vignette(SCREEN_UV);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/vignette_intensity = 0.1
shader_param/vignette_opacity = 0.15

[node name="CRTShader" type="CanvasLayer"]

[node name="SimpleScanLines" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 320, 240 )
mouse_filter = 2
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Vignette" type="ColorRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}
